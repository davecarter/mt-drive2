'use strict';

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var BusEvents = (function () {
  function BusEvents() {
    _classCallCheck(this, BusEvents);
  }

  _createClass(BusEvents, [{
    key: 'on',
    value: function on(event, fn) {}
  }, {
    key: 'emit',
    value: function emit(event) {}
  }]);

  return BusEvents;
})();

;

var JQueryBusEvents = (function (_BusEvents) {
  _inherits(JQueryBusEvents, _BusEvents);

  function JQueryBusEvents() {
    var $ = arguments.length <= 0 || arguments[0] === undefined ? window.jQuery : arguments[0];

    _classCallCheck(this, JQueryBusEvents);

    _get(Object.getPrototypeOf(JQueryBusEvents.prototype), 'constructor', this).call(this);
    this.$ = $;
  }

  _createClass(JQueryBusEvents, [{
    key: 'on',
    value: function on(event, fn) {
      this.$(document).on(event, fn);
    }
  }, {
    key: 'emit',
    value: function emit(event) {
      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      this.$(document).trigger.apply(this.$(document), [event].concat(data));
    }
  }]);

  return JQueryBusEvents;
})(BusEvents);

window.bus = new JQueryBusEvents();

(function () {
  $('#btn').on('click', function () {
    window.bus.emit('close-modal');
  });
})();

(function () {
  window.bus.on('close-modal', function () {
    console.log('cierra modal');
  });
})();