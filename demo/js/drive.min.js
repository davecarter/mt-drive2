'use strict';

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var BusEvents = (function () {
  function BusEvents() {
    _classCallCheck(this, BusEvents);
  }

  _createClass(BusEvents, [{
    key: 'on',
    value: function on(event, fn) {}
  }, {
    key: 'emit',
    value: function emit(event) {}
  }]);

  return BusEvents;
})();

;

var JQueryBusEvents = (function (_BusEvents) {
  _inherits(JQueryBusEvents, _BusEvents);

  function JQueryBusEvents() {
    var $ = arguments.length <= 0 || arguments[0] === undefined ? window.jQuery : arguments[0];

    _classCallCheck(this, JQueryBusEvents);

    _get(Object.getPrototypeOf(JQueryBusEvents.prototype), 'constructor', this).call(this);
    this.$ = $;
  }

  _createClass(JQueryBusEvents, [{
    key: 'on',
    value: function on(event, fn) {
      this.$(document).on(event, fn);
    }
  }, {
    key: 'emit',
    value: function emit(event) {
      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      this.$(document).trigger.apply(this.$(document), [event].concat(data));
    }
  }]);

  return JQueryBusEvents;
})(BusEvents);

window.bus = new JQueryBusEvents();

(function () {

  // OPEN MODAL
  window.bus.on('say-modal-on', function (e, trigger) {
    window.bus.emit('mt-Modal-show', [trigger]);
    window.bus.emit('mt-Overlay-create', [trigger]);
  });

  // CLOSE MODAL
  window.bus.on('say-modal-off', function (e, trigger) {
    window.bus.emit('mt-Modal-close', [trigger]);
    window.bus.emit('mt-Overlay-close');
  });

  // CLOSE OVERLAY
  window.bus.on('say-overlay-off', function () {
    window.bus.emit('mt-Overlay-close');
    window.bus.emit('mt-Modal-close');
  });
})();

(function ($) {
  $.fn.DriveCard = function () {
    return this.each(function () {
      var $self = $(this),
          cardlId = $self.attr('id'),
          $codeToggleBtn = $self.find('[data-card="code-toggle"]'),
          $codeBlock = $self.find('[data-card="code"]');

      var toggleCode = function toggleCode(e, trigger) {
        $codeToggleBtn.toggleClass('is--open');
        $codeBlock.slideToggle();
      };

      var bindEvents = function bindEvents() {
        $codeToggleBtn.on('click', function () {
          toggleCode();
          window.bus.emit('say-card-code-toggle', [cardlId]);
        });
      };

      var init = function init() {
        $codeToggleBtn.removeClass('is--open');
        // $codeBlock.hide();
        bindEvents();
      };
      init();
    });
  };

  $('[data-card="card"]').DriveCard();
})(jQuery);

(function ($) {
  $.fn.Modal = function () {
    return this.each(function () {
      var $self = $(this),
          $body = $('body'),
          $modalId,
          $modal;

      var showModal = function showModal(e, trigger) {
        $modalId = $(trigger).data('modal-id');
        var $modal = $('#' + $modalId);

        $body.addClass('is--modal-open');
        $modal.show();
      };

      var closeModal = function closeModal(e, trigger) {
        $body.removeClass('is--modal-open');
        $self.hide();
      };

      var bindEvents = function bindEvents() {
        window.bus.on('mt-Modal-show', showModal);
        window.bus.on('mt-Modal-close', closeModal);
      };

      var init = function init() {
        bindEvents();
      };

      init();
    });
  };

  $('[data-modal="modal"]').Modal();

  $('[data-modal="open"]').on('click', function (e) {
    window.bus.emit('say-modal-on', [this]);
    e.preventDefault();
  });

  $('[data-modal="close"]').on('click', function (e) {
    window.bus.emit('say-modal-off', [this]);
    e.preventDefault();
  });
})(jQuery);

(function () {
  var $body = $('body');

  var createOverlay = function createOverlay(e, trigger) {
    var $overlay = $('<div>', {
      'class': 'mt-overlay',
      click: function click() {
        window.bus.emit('say-overlay-off');
      }
    });
    $overlay.appendTo($body);
    $body.addClass('is--modal-open');
  };

  var closeOverlay = function closeOverlay() {
    $('.mt-overlay').remove();
  };

  var bindEvents = function bindEvents() {
    window.bus.on('mt-Overlay-create', createOverlay);
    window.bus.on('mt-Overlay-close', closeOverlay);
  };

  var init = function init() {
    bindEvents();
  };

  init();
})();